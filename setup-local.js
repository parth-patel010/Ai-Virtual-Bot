#!/usr/bin/env node

/**
 * Local Development Setup Script
 * This script helps set up Craftora for local development
 */

import { promises as fs } from 'fs';
import path from 'path';

async function checkFileExists(filePath) {
  try {
    await fs.access(filePath);
    return true;
  } catch {
    return false;
  }
}

async function createDefaultApiConfig() {
  const apiConfigPath = 'api.json';
  const examplePath = 'api.example.json';
  
  if (await checkFileExists(apiConfigPath)) {
    console.log('âœ“ api.json already exists');
    return;
  }
  
  if (await checkFileExists(examplePath)) {
    try {
      const exampleContent = await fs.readFile(examplePath, 'utf8');
      await fs.writeFile(apiConfigPath, exampleContent, 'utf8');
      console.log('âœ“ Created api.json from api.example.json');
      console.log('  â†’ Edit api.json to add your Gemini API key');
    } catch (error) {
      console.error('âœ— Failed to copy api.example.json:', error.message);
    }
  } else {
    // Create a minimal api.json if example doesn't exist
    const defaultConfig = {
      "gemini": {
        "apiKey": "YOUR_GEMINI_API_KEY_HERE",
        "model": "gemini-2.0-flash-exp",
        "maxTokens": 4096,
        "temperature": 0.7
      },
      "team": {
        "description": "Add your Gemini API key above",
        "instructions": [
          "1. Get your API key from https://aistudio.google.com/app/apikey",
          "2. Replace YOUR_GEMINI_API_KEY_HERE with your actual key",
          "3. Keep this file private (it's already in .gitignore)"
        ]
      },
      "fallback": {
        "enabled": true,
        "description": "Template responses when no API key is provided"
      }
    };
    
    try {
      await fs.writeFile(apiConfigPath, JSON.stringify(defaultConfig, null, 2), 'utf8');
      console.log('âœ“ Created default api.json');
      console.log('  â†’ Edit api.json to add your Gemini API key');
    } catch (error) {
      console.error('âœ— Failed to create api.json:', error.message);
    }
  }
}

async function createDatasetDirectory() {
  const datasetDir = 'generated-code-dataset';
  
  try {
    await fs.mkdir(datasetDir, { recursive: true });
    
    // Create README if it doesn't exist
    const readmePath = path.join(datasetDir, 'README.md');
    if (!(await checkFileExists(readmePath))) {
      const readmeContent = `# Generated Code Dataset

This directory contains all the code generated by Craftora for potential c2 model training.

## Structure

Each generation is stored in its own folder with the format:
\`generation_[ID]_[TIMESTAMP]\`

Each folder contains:
- \`prompt.txt\` - The user's prompt
- \`index.html\` - Generated HTML code
- \`style.css\` - Generated CSS code  
- \`script.js\` - Generated JavaScript code
- \`metadata.json\` - Generation metadata (model, timestamp, etc.)

## Export

Use the Dataset panel in the app to export this data in training formats.
`;
      
      await fs.writeFile(readmePath, readmeContent, 'utf8');
    }
    
    console.log('âœ“ Dataset directory ready');
  } catch (error) {
    console.error('âœ— Failed to create dataset directory:', error.message);
  }
}

async function checkPackageJson() {
  try {
    const packagePath = 'package.json';
    if (await checkFileExists(packagePath)) {
      console.log('âœ“ package.json found');
      return true;
    } else {
      console.error('âœ— package.json not found - make sure you\'re in the project root');
      return false;
    }
  } catch (error) {
    console.error('âœ— Error checking package.json:', error.message);
    return false;
  }
}

async function main() {
  console.log('ðŸš€ Setting up Craftora for local development...\n');
  
  // Check if we're in the right directory
  if (!(await checkPackageJson())) {
    process.exit(1);
  }
  
  // Set up configuration
  await createDefaultApiConfig();
  
  // Set up dataset directory
  await createDatasetDirectory();
  
  console.log('\nâœ… Local setup complete!');
  console.log('\nNext steps:');
  console.log('1. Edit api.json and add your Gemini API key');
  console.log('2. Run: npm install');
  console.log('3. Run: npm run dev');
  console.log('\nGet your API key at: https://aistudio.google.com/app/apikey');
}

main().catch(error => {
  console.error('Setup failed:', error);
  process.exit(1);
});